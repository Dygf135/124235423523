name: Solve CAPTCHA and Capture Screenshot

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  solve_captcha_and_screenshot:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Create package.json
      run: |
        echo '{"name": "captcha-solver-action", "version": "1.0.0", "private": true}' > package.json
        
    - name: Install dependencies
      run: |
        npm install puppeteer puppeteer-extra puppeteer-extra-plugin-stealth axios
        
    - name: Create CAPTCHA solver script
      run: |
        cat << 'EOD' > captcha_solver.js
        const { executablePath } = require("puppeteer");
        const puppeteer = require("puppeteer-extra");
        const StealthPlugin = require("puppeteer-extra-plugin-stealth");
        puppeteer.use(StealthPlugin());

        async function run() {
          const browser = await puppeteer.launch({
            headless: true,
            args: [
              "--no-sandbox",
              "--disable-setuid-sandbox",
              "--allow-external-pages",
              "--allow-third-party-modules",
              "--data-reduction-proxy-http-proxies",
              "--disable-web-security",
              "--disable-features=IsolateOrigins,site-per-process,SitePerProcess",
              "--flag-switches-begin --disable-site-isolation-trials --flag-switches-end",
            ],
            executablePath: executablePath(),
          });

          const page = await browser.newPage();
          await page.goto("https://patrickhlauke.github.io/recaptcha/", {
            waitUntil: "networkidle0",
          });

          // Solver code
          await page.evaluate(() => {
            // Paste the entire content of the evaluate function here
            // ...
          });

          // Wait for the CAPTCHA to be solved
          await page.waitForFunction(
            () => {
              const recaptchaStatus = document
                .querySelector('iframe[src*="api2/anchor"]')
                .contentWindow.document.querySelector("#recaptcha-accessible-status");
              return (
                recaptchaStatus &&
                recaptchaStatus.innerText.includes("You are verified")
              );
            },
            { timeout: 60000 },
          );

          // Take a screenshot after CAPTCHA is solved
          await page.screenshot({ path: "screenshot.png" });
          console.log("Screenshot taken after CAPTCHA is solved.");

          await browser.close();
        }

        run();
        EOD
        
    - name: Run CAPTCHA solver and capture screenshot
      run: node captcha_solver.js
        
    - name: Upload screenshot
      uses: actions/upload-artifact@v3
      with:
        name: captcha-solved-screenshot
        path: screenshot.png
